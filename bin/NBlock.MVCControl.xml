<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NBlock.MVCControl</name>
    </assembly>
    <members>
        <member name="T:NBlock.MVCControl.FileUploadJsonResult">
            <summary>
            A JsonResult with ContentType of text/html and the serialized object contained within textarea tags
            </summary>
            <remarks>
            It is not possible to upload files using the browser's XMLHttpRequest
            object. So the jQuery Form Plugin uses a hidden iframe element. For a
            JSON response, a ContentType of application/json will cause bad browser
            behavior so the content-type must be text/html. Browsers can behave badly
            if you return JSON with ContentType of text/html. So you must surround
            the JSON in textarea tags. All this is handled nicely in the browser
            by the jQuery Form Plugin. But we need to overide the default behavior
            of the JsonResult class in order to achieve the desired result.
            参考网址：http://aspzone.com/tech/jquery-file-upload-in-asp-net-mvc-without-using-flash/
            </remarks>
        </member>
        <member name="T:NBlock.MVCControl.nbConstant">
            <summary>
            常量定义
            </summary>
        </member>
        <member name="F:NBlock.MVCControl.nbConstant.GRID_COLUMN_ENUM_KEY_SEPARATOR">
            <summary>
            列表显示枚举列的分隔符
            </summary>
        </member>
        <member name="T:NBlock.MVCControl.Tree.TreeSettings">
            <summary>
            树的设置类
            </summary>
            <typeparam name="T" >Model对象类型</typeparam>
        </member>
        <member name="M:NBlock.MVCControl.Tree.TreeSettings.#ctor">
            <summary>
            构造函数，初始化<see cref="!:TreeSettings&lt;T&gt;"/> 类，设置输出树HTML的实例
            </summary>
        </member>
        <member name="M:NBlock.MVCControl.Tree.TreeSettings.#ctor(System.String)">
            <summary>
            构造函数，初始化<see cref="!:TreeSettings&lt;T&gt;"/> 类，设置输出树HTML的实例
            </summary>
        </member>
        <member name="M:NBlock.MVCControl.Tree.TreeSettings.ID(System.String)">
            <summary>
            设置树容器的Id
            </summary>
            <param name="id">树容器的Id</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Tree.TreeSettings.OnNodeClick(System.String)">
            <summary>
            点击node触发的事件
            </summary>
            <param name="function">触发事件，参数为当前节点数据item </param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Tree.TreeSettings.OnCheckboxClick(System.String)">
            <summary>
            点击checkbox时触发的事件
            </summary>
            <param name="function">触发事件，参数为当前节点数据item和变更之后的状态s</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Tree.TreeSettings.OnParseData(System.String)">
            <summary>
            解释数据，可以用于加载数据后对数据进行处理！
            </summary>
            <param name="function">解释数据的事件，参数为整棵树数据data</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Tree.TreeSettings.CascadeCheck(System.Boolean)">
            <summary>
            是否启用级联选择，比如设置菜单时，子节点选中，则父节点也需要同时选中
            </summary>
            <param name="enabled">默认为启用</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Tree.TreeSettings.Action(System.String)">
            <summary>
            异步请求的url
            </summary>
            <param name="actionUrl">Action地址</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Tree.TreeSettings.ShowCheck(System.Boolean)">
            <summary>
            是否显示checkbox
            </summary>
            <param name="show">默认为显示</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Tree.TreeSettings.Theme(System.Nullable{NBlock.MVCControl.Tree.TreeTheme})">
            <summary>
            三种风格备选bbit-tree-lines ,bbit-tree-no-lines,bbit-tree-arrows
            </summary>
            <param name="theme">默认为bbit-tree-arrows风格</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Tree.TreeSettings.Width(System.Int32)">
            <summary>
            设置树容器的宽度
            </summary>
        </member>
        <member name="M:NBlock.MVCControl.Tree.TreeSettings.Width(System.String)">
            <summary>
            设置树容器的宽度
            </summary>
        </member>
        <member name="M:NBlock.MVCControl.Tree.TreeSettings.Height(System.Int32)">
            <summary>
            设置树高度
            </summary>
            <param name="height">高度</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Tree.TreeSettings.Height(System.String)">
            <summary>
            设置树高度
            </summary>
            <param name="height">高度，可以是变量</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Tree.TreeSettings.layoutH(System.Int32)">
            <summary>
            树高度自适应，设置树以外的固定高度，如外部标题的高度。
            浏览器窗口大小改变时树高度自适应, 因为树以外的高度是固定的, 需要告诉js根据树以外的高度来计算出树的高度.
            </summary>
            <param name="height">树以外的固定高度（像素）</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Tree.TreeSettings.DefaultNodeId(System.String)">
            <summary>
            默认点击节点Id
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Tree.TreeSettings.Grid(System.String,System.String,System.String,System.String)">
            <summary>
            绑定关联的列表
            </summary>
            <param name="gridParamName">Grid参数名称，默认为ParentId</param>
            <param name="defaultNodeId">默认选择节点Id, 如果不设置，则为FirstNode（树的第一个节点）</param>
            <param name="gridId">关联列表Id，默认是当前页面的所有grid</param>
            <param name="gridActionUrl">Grid列表的数据请求地址</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Tree.TreeSettings.Sync(System.Boolean)">
            <summary>
            在左树右列表的布局，新增记录之后是否需要同步刷新树，默认为同步刷新树
            </summary>
            <param name="isSync"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Tree.TreeSettings.ValidateSettings">
            <summary>
            校验配置
            </summary>
        </member>
        <member name="M:NBlock.MVCControl.Tree.TreeSettings.Render(NBlock.MVCControl.Tree.TreeSettings)">
            <summary>
            输出Grid控件的HTML
            </summary>
            <param name="data">树类型</param>
            <returns>HTML格式的字符串</returns>
        </member>
        <member name="P:NBlock.MVCControl.Tree.TreeSettings.TreeId">
            <summary>
            树Id
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Tree.TreeSettings.TreeActionUrl">
            <summary>
            异步请求的url
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Tree.TreeSettings.TreeShowCheck">
            <summary>
            是否显示checkbox    
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Tree.TreeSettings.TreeOnCheckboxClick">
            <summary>
            点击checkbox时触发的事件
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Tree.TreeSettings.TreeOnNodeClick">
            <summary>
            点击node触发的事件
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Tree.TreeSettings.TreeCascadeCheck">
            <summary>
            是否启用级联选择，比如设置菜单时，子节点选中，则父节点也需要同时选中
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Tree.TreeSettings.TreeTheme">
            <summary>
            三种风格备选bbit-tree-lines ,bbit-tree-no-lines,bbit-tree-arrows
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Tree.TreeSettings.TreeWidth">
            <summary>
            设置树容器的宽度
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Tree.TreeSettings.TreeHeight">
            <summary>
            设置树容器的高度
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Tree.TreeSettings.TreelayoutH">
            <summary>
            树高度自适应，设置树以外的固定高度，如外部标题的高度。
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Tree.TreeSettings.TreeDefaultNodeId">
            <summary>
            设置默认节点的Id
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Tree.TreeSettings.TreeGridActionUrl">
            <summary>
            设置关联Grid的Action地址
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Tree.TreeSettings.TreeGridId">
            <summary>
            设置关联Grid的Id
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Tree.TreeSettings.TreeOnParseData">
            <summary>
            解释数据，可以用于加载数据后对数据进行处理！
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Tree.TreeSettings.TreeSync">
            <summary>
            在左树右列表的布局，新增记录之后是否需要同步刷新树
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Tree.TreeSettings.TreeGridParamName">
            <summary>
            Grid参数名称
            </summary>
        </member>
        <member name="T:NBlock.MVCControl.JsonTreeNode">
            <summary>
            如果子节点不存在，但是hasChildren为真，同时complete属性不为真则需要异步加载子节点，，如子节点存在，但是没有Render那么就要Render）
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.JsonTreeNode.id">
            <summary>
            treenode的主键必须唯一
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:NBlock.MVCControl.JsonTreeNode.text">
            <summary>
            treenode的显示文本
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:NBlock.MVCControl.JsonTreeNode.value">
            <summary>
            节点的值
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:NBlock.MVCControl.JsonTreeNode.showcheck">
            <summary>
            是否显示checkbox，如果前端设置了配置 showcheck: true，这里设置为true也有用，否则始终不会显示checkbox
            相反就算你前端设置了showcheck: true ，这个属性设置false那么前端这个节点也不会显示checkbox。
            </summary>
            <value><c>true</c> if showcheck; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NBlock.MVCControl.JsonTreeNode.isexpand">
            <summary>
            是否展开，一般用于父节点展开，同时再获取一下节点的数据。
            当设置为true时应该保证他的下级数据已经加载。
            </summary>
            <value><c>true</c> if isexpand; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NBlock.MVCControl.JsonTreeNode.checkstate">
            <summary>
            选中的状态0,1,2 0为没有选中，1为选中，2为半选
            </summary>
            <value>The checkstate.</value>
        </member>
        <member name="P:NBlock.MVCControl.JsonTreeNode.hasChildren">
            <summary>
            是否有子节点
            </summary>
            <value>
            	<c>true</c> if this instance has children; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NBlock.MVCControl.JsonTreeNode.complete">
            <summary>
            是否已经完成加载，如果这个节点设置为true则，展开节点时不会发起ajax请求。
            </summary>
            <value><c>true</c> if complete; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NBlock.MVCControl.JsonTreeNode.classes">
            <summary>
            节点的自定义样式，可以为节点设置特定的样式，如修改节点的图标
            </summary>
            <value>The classes.</value>
        </member>
        <member name="P:NBlock.MVCControl.JsonTreeNode.data">
            <summary>
            额外的数据
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:NBlock.MVCControl.JsonTreeNode.ChildNodes">
            <summary>
            子节点的数据
            </summary>
        </member>
        <member name="T:NBlock.MVCControl.Theme">
            <summary>
            主题
            </summary>
        </member>
        <member name="F:NBlock.MVCControl.Theme.Blue">
            <summary>
            蓝色风格
            </summary>
        </member>
        <member name="T:NBlock.MVCControl.TreeExtensions">
            <summary>
            Grid扩展类
            </summary>
        </member>
        <member name="M:NBlock.MVCControl.TreeExtensions.nbTree(System.Web.Mvc.HtmlHelper,System.Action{NBlock.MVCControl.Tree.TreeSettings})">
            <summary>
            Grid的树控件
            </summary>
            <param name="settings">设置属性的操作</param>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="P:NBlock.MVCControl.JsonGridData.error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:NBlock.MVCControl.GridError.ErrorCode">
            <summary>
            Gets or sets the error code.
            </summary>
            <value>The error code.</value>
        </member>
        <member name="P:NBlock.MVCControl.GridError.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="T:NBlock.MVCControl.Grid.GridSettings`1">
            <summary>
            Grid的设置类
            </summary>
            <typeparam name="T" >Model对象类型</typeparam>
        </member>
        <member name="F:NBlock.MVCControl.Grid.GridSettings`1._renderer">
            <summary>
            输出表格HTML的实例
            </summary>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.#ctor(System.Web.Mvc.HtmlHelper)">
            <summary>
            构造函数，初始化<see cref="T:NBlock.MVCControl.Grid.GridSettings`1"/> 类，设置输出表格HTML的实例
            </summary>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.OnRowBindHandler(System.String)">
            <summary>
            绑定行处理函数，参数是当前行（tr），如在生成行时绑定事件，如双击，右键等。 
            绑定行的双击事件的代码如：$(tr).dbclick(dbclickfun);
            </summary>
            <param name="function">行绑定函数，参数是当前行（tr）</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.OnRowChecked(System.String)">
            <summary>
            当行被选中时触发的事件，这里指checkbox选中
            </summary>
            <param name="function">触发事件</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.OnSuccess(System.String)">
            <summary>
            数据加载成功后执行的函数，参数为后台请求的数据（data）
            </summary>
            <param name="function">触发事件，参数为后台请求的数据（data）</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.ID(System.String)">
            <summary>
            设置要生成Grid的Id
            </summary>
            <param name="elementId">HTML元素ID</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.Action(System.String)">
            <summary>
            请求服务端数据的URL
            </summary>
            <param name="actionUrl">Action地址</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.FormAction(System.String)">
            <summary>
            关联编辑表单的URL
            </summary>
            <param name="actionUrl">Action地址</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.DataType(System.Web.Mvc.Html.GridDataType)">
            <summary>
            传递数据的类型
            </summary>
            <param name="dataType">数据类型 Xml 或 Json，默认为Json</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.Title(System.String)">
            <summary>
            设置表格的标题
            </summary>
            <param name="title">标题</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.SetPageSize(System.Int32)">
            <summary>
            设置每页显示的结果数
            </summary>
            <param name="pageSize">每页记录数</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.ShowTableToggleButton(System.Boolean)">
            <summary>
            设置显示/隐藏Grid的按钮是否有效
            </summary>
            <param name="show">是否显示</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.ShowCheckBox(System.Boolean)">
            <summary>
            是否显示选择框（checkbox）
            </summary>
            <param name="show">是否显示</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.SelectedOnClick(System.Boolean)">
            <summary>
            点击行即选中该行数据
            </summary>
            <param name="enable">是否启用</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.UsePager(System.Boolean)">
            <summary>
            设置是否为默认分页
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.DefaultSortOption(System.String,System.Web.Mvc.Html.GridSortOrder)">
            <summary>
            默认排序的字段名，及排序方式
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="order">排序规则</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.Columns(System.Action{NBlock.MVCControl.Grid.GridColumnCollection{`0}})">
            <summary>
            设置表格的列
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.Buttons(System.Action{NBlock.MVCControl.Grid.GridButtonCollection{`0}})">
            <summary>
            设置表格的按钮
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.Width(System.Int32)">
            <summary>
            设置表格宽度
            </summary>
            <param name="width">宽度</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.Width(System.String)">
            <summary>
            设置表格宽度
            </summary>
            <param name="width">宽度，可以是变量</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.layoutW(System.Int32)">
            <summary>
            表格宽度自适应，设置表格以外的固定宽度，如外部标题的宽度。
            浏览器窗口大小改变时表格宽度自适应, 因为表格以外的高度是固定的, 需要告诉js根据表格以外的高度来计算出表格的高度.
            </summary>
            <param name="width">表格以外的固定宽度（像素）</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.Height(System.Int32)">
            <summary>
            设置表格高度
            </summary>
            <param name="height">高度，自适应高度</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.Height(System.String)">
            <summary>
            设置表格高度
            </summary>
            <param name="height">高度，可以是变量</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.layoutH(System.Int32)">
            <summary>
            表格高度自适应，设置表格以外的固定高度，如外部标题的高度。
            浏览器窗口大小改变时表格高度自适应, 因为表格以外的高度是固定的, 需要告诉js根据表格以外的高度来计算出表格的高度.
            </summary>
            <param name="height">表格以外的固定高度（像素）</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.ExtParam(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            扩展外部参数动态注册到grid，实现如第一次查询的默认条件、子表的动态查询参数（订单明细需要动态的订单Id）
            </summary>
            <param name="dic"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.ExtParam(System.Object)">
            <summary>
            扩展外部参数动态注册到grid，实现如第一次查询的默认条件、子表的动态查询参数（订单明细需要动态的订单Id）
            </summary>
            <param name="dic">写法：new { OrgId = "$('#OrgId').val()" }</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.ShowFooter(System.Boolean)">
            <summary>
            是否Footer，一般可以用来显示汇总信息
            </summary>
            <param name="show">是否显示</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.SummaryTemplate(System.String)">
            <summary>
            汇总信息显示模版, 变量格式为：${name}, 其中name为汇总字段名
            </summary>
            <param name="template">模版文本或HTML片段</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.DataSource(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            设置Grid的数据源，一般用于第一次加载，尤其是在主从表界面。
            </summary>
            <param name="data">数据源</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridSettings`1.AutoLoad(System.Boolean)">
            <summary>
            自动加载, 如果第一次不要异步请求数据，则设置为False
            </summary>
            <param name="isAutoLoad">是否自动加载</param>
            <returns></returns>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.GridHeight">
            <summary>
            高度
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.GridlayoutH">
            <summary>
            表格高度自适应，设置表格以外的固定高度，如外部标题的高度。
            浏览器窗口大小改变时表格高度自适应, 因为表格以外的高度是固定的, 需要告诉js根据表格以外的高度来计算出表格的高度.
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.GridWidth">
            <summary>
            宽度
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.GridlayoutW">
            <summary>
            表格宽度自适应，设置表格以外的固定宽度，如外部标题的宽度。
            浏览器窗口大小改变时表格宽度自适应, 因为表格以外的高度是固定的, 需要告诉js根据表格以外的高度来计算出表格的高度.
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.DefaultSortOrder">
            <summary>
            排序规则
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.DefaultSortField">
            <summary>
            默认排序字段
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.EnablePager">
            <summary>
            是否分页
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.PageSize">
            <summary>
            每页默认的结果数
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.EnableTableToggleButton">
            <summary>
            显示/隐藏Grid的按钮是否有效
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.EnableRecordsPerPage">
            <summary>
            是否可以动态设置每页显示的结果数
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.GridTitle">
            <summary>
            表格标题
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.GridDataType">
            <summary>
            表格的数据格式
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.ActionUrl">
            <summary>
            请求服务端数据的URL
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.FormActionUrl">
            <summary>
            关联编辑表单的URL
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.GridId">
            <summary>
            表格ID
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.EnableAutoLoad">
            <summary>
            自动加载, 如果第一次不要异步请求数据，则设置为False
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.EnableShowCheckBox">
            <summary>
            是否显示选择框（checkbox）
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.EnableSelectedOnClick">
            <summary>
            点击行即选中该行数据
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.GridRowChecked">
            <summary>
            当行被选中时触发的事件，这里指checkbox选中
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.GridExtParam">
            <summary>
            扩展外部参数动态注册到grid，实现如自定义查询等操作  
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.GridColumns">
            <summary>
            列信息集合
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.GridButtons">
            <summary>
            按钮信息集合
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.GridOnSuccess">
            <summary>
            数据加载成功后执行的函数，参数为后台请求的数据（data）
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.EnableShowFooter">
            <summary>
            是否显示Footer
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.GridSummaryTemplate">
            <summary>
            汇总信息显示模版
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.GridDataSource">
            <summary>
            数据源，一般用于第一次加载
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridSettings`1.GridOnRowBindHandler">
            <summary>
            绑定行处理函数，参数是当前行（tr），如在生成行时绑定事件，如双击，右键等。 
            绑定行的双击事件的代码如：$(tr).dbclick(dbclickfun);
            </summary>
        </member>
        <member name="T:NBlock.MVCControl.GridExtensions">
            <summary>
            Grid扩展类
            </summary>
        </member>
        <member name="M:NBlock.MVCControl.GridExtensions.nbGridFor``1(System.Web.Mvc.HtmlHelper,System.Action{NBlock.MVCControl.Grid.GridSettings{``0}})">
            <summary>
            Grid的表格控件(Flexigrid)
            </summary>
            <typeparam name="T">模型对象</typeparam>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.GridExtensions.nbFormListFor``1(System.Web.Mvc.HtmlHelper,System.Action{NBlock.MVCControl.Grid.GridSettings{``0}})">
            <summary>
            主从表表单中的列表控件(Flexigrid)
            </summary>
            <typeparam name="T">模型对象</typeparam>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.GridExtensions.nbDetailFor``1(System.Web.Mvc.HtmlHelper,System.Action{NBlock.MVCControl.Grid.GridSettings{``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            主从表表单中的列表控件(Flexigrid)
            </summary>
            <typeparam name="T">模型对象</typeparam>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.GridExtensions.ToGridData``1(NBlock.MVCControl.nbPageInfo,NBlock.Core.ORM.Pageable{``0})">
            <summary>
            数据转化，将数据分页实体转化为Grid识别的数据格式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pageInfo"></param>
            <param name="list"></param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.GridExtensions.ToGridData``1(NBlock.MVCControl.nbPageInfo,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            数据转化，将列表转化为Grid识别的数据格式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pageInfo"></param>
            <param name="list"></param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="T:NBlock.MVCControl.nbPageInfo">
            <summary>
            分页信息
            </summary>
        </member>
        <member name="T:NBlock.MVCControl.nbPagerBinder">
            <summary>
            分页信息绑定器
            </summary>
        </member>
        <member name="T:NBlock.MVCControl.Grid.GridColumnSettings">
            <summary>
            Grid的列配置信息
            </summary>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnSettings.Width(System.Int32)">
            <summary>
            设置当前列的宽度 未指定的情况下将置为100
            </summary>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnSettings.Width(System.String)">
            <summary>
            设置当前列的宽度 未指定的情况下将置为100
            </summary>
            <param name="width">宽度，可以是js变量或js函数</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnSettings.Title(System.String)">
            <summary>
            设置当前列的标题
            </summary>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnSettings.Sortable(System.Boolean)">
            <summary>
            设置当前列是否可排序
            </summary>
            <param name="sortable"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnSettings.Align(System.Web.Mvc.Html.GridAlign)">
            <summary>
            设置当前列对齐方式
            </summary>
            <param name="align">对齐方式</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnSettings.Align(System.String)">
            <summary>
            设置当前列对齐方式
            </summary>
            <param name="align">对齐方式，r：居右，c：居中，l：居左</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnSettings.HeaderAlign(System.Web.Mvc.Html.GridAlign)">
            <summary>
            设置列头标题的对齐方式
            </summary>
            <param name="align">对齐方式</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnSettings.Hide">
            <summary>
            设置当前列为隐藏列
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnSettings.Toggle(System.Boolean)">
            <summary>
            希望某列不参与显示隐藏控制，即在生成下拉控制器时判断该属性为真则跳过
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnSettings.AsQuery(System.Boolean)">
            <summary>
            是否为快速检索字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnSettings.AsSearch(System.Web.Mvc.Html.SearchControlType,System.Boolean,System.Boolean)">
            <summary>
            是否为高级检索字段
            </summary>
            <param name="type">控件类型，默认是文本框</param>
            <param name="nowrap">是否整行显示，默认为否。整行显示会产生右边是空白项的效果</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnSettings.Javascript(System.String)">
            <summary>
            格式化当前列的Javascript脚本，不是函数
            该脚本在执行完Template之后执行，value参数为当前单元格的内容，row为当前行的值
            参考DateFormat（日期格式化）
            </summary>
            <param name="function">显示文本的方法</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnSettings.Process(System.String)">
            <summary>
            处理函数,将生成的HTML添加到单元格中，可格式化单元格。
            类型:function，参数为value，id，row
            </summary>
            <param name="jsFunction">js函数方法</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnSettings.IsKey">
            <summary>
            是否为主键
            </summary>
            <param name="sortable"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnSettings.EnumKey(System.String)">
            <summary>
            设置枚举类型
            </summary>
            <param name="enumKey">数据库枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnSettings.EnumKey``1">
            <summary>
            设置枚举类型
            </summary>
            <typeparam name="TEnum">系统级别的枚举类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnSettings.DateFormat(System.String)">
            <summary>
            日期格式化
            </summary>
            <param name="format">格式</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnSettings.Template(System.String)">
            <summary>
            为当前列设置显示模板，变量格式为：${name}
            </summary>
            <param name="template">模板字符串，如：查看、
                                                Url.GridRowEditLink("编辑部门"）、
                                                Url.GridRowDeleteLink("OrgName")</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnSettings.Template(System.Func{System.String,System.Web.WebPages.HelperResult})">
            <summary>
            为当前列设置显示模板，变量格式为：${name}
            </summary>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnSettings.Summary(System.Web.Mvc.Html.SummaryType)">
            <summary>
            列汇总
            </summary>
            <param name="type">汇总类型</param>
            <returns></returns>
        </member>
        <member name="T:NBlock.MVCControl.Grid.GridButton">
            <summary>
            表格的按钮信息
            </summary>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridButton.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="buttonName">按钮名称</param>
            /// <param name="buttonTitle">按钮显示标题</param>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridButton.ToolTip(System.String)">
            <summary>
            设置按钮的ToolTip（提示信息）
            </summary>
            <param name="title">提示信息</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridButton.Type(System.Web.Mvc.Html.GridButtonType)">
            <summary>
            设置按钮的类型（新增、修改、删除、导出等）
            </summary>
            <param name="type">类型（新增、修改、删除、导出等）</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridButton.OnClick(System.String)">
            <summary>
            当button被点击时触发的事件 
            接受button的name为第一个参数，Grid为第二个参数的一个function 
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridButton.Action(System.String)">
            <summary>
            超链接地址 
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridButton.Options(System.Object)">
            <summary>
            按钮的选项参数，可以用于设置弹出层的宽度、高度等属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.LinkExtensions.Css(System.Web.Mvc.HtmlHelper,NBlock.MVCControl.Theme,System.String[])">
            <summary>
            输出样式表到前台UI界面，样式表必须放在主题文件夹下，如： ./Themes/主题文件夹/ 
            </summary>
            <param name="html"></param>
            <param name="theme">主题样式</param>
            <param name="cssfilename">样式表文件名称</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.LinkExtensions.Css(System.Web.Mvc.HtmlHelper,System.String[])">
            <summary>
            输出样式表到前台UI界面，样式表必须放在主题文件夹下，如： ./Themes/主题文件夹/ 
            </summary>
            <param name="html"></param>
            <param name="cssfilename">样式表文件名称</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.LinkExtensions.Js(System.Web.Mvc.HtmlHelper,System.String[])">
            <summary>
            输出Js脚本到前台UI界面，Js脚本必须放在Scripts文件夹下
            </summary>
            <param name="html"></param>
            <param name="jsKeys">Js脚本文件名称</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.LinkExtensions.GridRowEditLink(System.Web.Mvc.UrlHelper,System.String,System.String,System.Object)">
            <summary>
            列表中的行编辑链接
            </summary>
            <param name="url"></param>
            <param name="formTitle"></param>
            <param name="actionUrl"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.LinkExtensions.GridRowDeleteLink(System.Web.Mvc.UrlHelper,System.String,System.String)">
            <summary>
            列表中的行删除链接
            </summary>
            <param name="url"></param>
            <param name="fieldName">字段名称</param>
            <param name="actionUrl">删除链接</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.LinkExtensions.GridRowClientDeleteLink(System.Web.Mvc.UrlHelper,System.String,System.String)">
            <summary>
            删除客户端记录，一般出现在主从表
            </summary>
            <param name="url"></param>
            <param name="idField">主键的字段名称</param>
            <param name="gridId">列表的Id</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.LinkExtensions.OpenDialog(System.Web.Mvc.UrlHelper,System.String,System.String,System.Object)">
            <summary>
            弹出对话框的脚本段
            </summary>
            <param name="url"></param>
            <param name="actionUrl"></param>
            <param name="formTitle"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.LinkExtensions.AajxTodo(System.Web.Mvc.UrlHelper,System.String,System.String,System.String,System.String)">
            <summary>
            绑定Ajax请求，一般在超链接的href调用
            </summary>
            <param name="url"></param>
            <param name="actionUrl">远程请求服务地址</param>
            <param name="prompt">提示信息，在异步请求前提示用户是否继续</param>
            <param name="data">Json格式的字符串</param>
            <param name="callback">回调函数，参数为ajax返回的data</param>
            <returns>bool</returns>
        </member>
        <member name="M:NBlock.MVCControl.LinkExtensions.ConvertActionUrl(System.Web.Mvc.UrlHelper,System.String)">
            <summary>
            将字符串转化为Action地址，比如输入List，那么会转化成 /Home/List, 其中Homd为当前的Controller
            </summary>
            <param name="url"></param>
            <param name="actionUrl">地址</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.LinkExtensions.ActionLink``1(System.Web.Mvc.UrlHelper,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            利用Lambda方式来引用ActionName
            </summary>
            <typeparam name="TController"></typeparam>
            <param name="urlHelper"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="T:NBlock.MVCControl.Grid.GridColumn">
            <summary>
            表格的列信息
            </summary>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumn.IsEnumColumn(System.String)">
            <summary>
            判断列名称是否为枚举列
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumn.GetEnumColumnField(System.String)">
            <summary>
            获取枚举列的枚举项值的字段名称·
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumn.GetEnumColumnKey(System.String)">
            <summary>
            获取枚举列的枚举项的Key值
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridColumn.FieldName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:NBlock.MVCControl.Grid.GridColumn.ColumnSettings">
            <summary>
            列配置信息
            </summary>
        </member>
        <member name="T:NBlock.MVCControl.AjaxMessage">
            <summary>
            Ajax请求返回数据格式
            </summary>
        </member>
        <member name="M:NBlock.MVCControl.AjaxMessage.SetData(System.Object)">
            <summary>
            设置成功返回的数据
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="P:NBlock.MVCControl.AjaxMessage.IsSuccess">
            <summary>
            Gets or sets a value indicating whether this instance is success.
            </summary>
            <value>
            	<c>true</c> if this instance is success; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NBlock.MVCControl.AjaxMessage.Msg">
            <summary>
            Gets or sets the MSG.
            </summary>
            <value>The MSG.</value>
        </member>
        <member name="P:NBlock.MVCControl.AjaxMessage.Data">
            <summary>
            Gets or sets the public key.
            </summary>
            <value>The public key.</value>
        </member>
        <member name="P:NBlock.MVCControl.AjaxMessage.Successful">
            <summary>
            返回成功的Ajax请求信息
            </summary>
        </member>
        <member name="T:NBlock.MVCControl.Grid.GridRenderer`1">
            <summary>
            封装了输出Grid控件的HTML
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NBlock.MVCControl.Grid.IGridRenderer`1">
            <summary>
            输出表格的HTML接口
            </summary>
            <typeparam name="T">表格类型</typeparam>
        </member>
        <member name="M:NBlock.MVCControl.Grid.IGridRenderer`1.Render(`0)">
            <summary>
            输出指定表格类型的HTML接口
            </summary>
            <param name="data">表格类型</param>
            <returns>HTML格式的字符串</returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridRenderer`1.Render(NBlock.MVCControl.Grid.GridSettings{`0})">
            <summary>
            输出Grid控件的HTML
            </summary>
            <param name="data">表格类型</param>
            <returns>HTML格式的字符串</returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridRenderer`1.GenerateGridOptions(NBlock.MVCControl.Grid.GridSettings{`0})">
            <summary>
            生成Grid的配置信息
            </summary>
            <param name="data">表格类型</param>
            <returns>Grid配置信息</returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridRenderer`1.GetEnumTextColumn(NBlock.MVCControl.Grid.GridColumn)">
            <summary>
            获取枚举文本的信息列
            </summary>
            <param name="column">列信息</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridRenderer`1.GetExtParams(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取外部参数的字符串
            </summary>
            <param name="dic"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridRenderer`1.GetAutoColumnWidth(NBlock.MVCControl.Grid.GridSettings{`0})">
            <summary>
            获取自适应的计算方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridRenderer`1.GetSearchControl(NBlock.MVCControl.Grid.GridColumn)">
            <summary>
            获取查询条件的控件
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridRenderer`1.SetAdvanceQueryPanelTopScript">
            <summary>
            设置高级查询条件弹出层的位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridRenderer`1.GetColumnTemplateControl(NBlock.MVCControl.Grid.GridColumn)">
            <summary>
            获取模板控件列
            </summary>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridRenderer`1.GetDataSourceJson(NBlock.MVCControl.Grid.GridSettings{`0})">
            <summary>
            获取数据源的Json字符串
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:NBlock.MVCControl.Grid.GridColumnCollection`1">
            <summary>
            表格的列信息集合类
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="F:NBlock.MVCControl.Grid.GridColumnCollection`1._columns">
            <summary>
            列信息集合
            </summary>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnCollection`1.Bind(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Int32,System.Boolean)">
            <summary>
            绑定对象属性到表格字段
            </summary>
            <param name="action">对象属性的lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnCollection`1.Bind(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            绑定对象属性到表格字段
            </summary>
            <param name="bindField">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnCollection`1.BindEnum(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Int32)">
            <summary>
            绑定枚举列
            </summary>
            <param name="action"></param>
            <param name="enumKey"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnCollection`1.BindEnum``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32)">
            <summary>
            绑定枚举列
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="action"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnCollection`1.BindDateTime(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32)">
            <summary>
            绑定时间列
            </summary>
            <param name="action"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnCollection`1.BindControl(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Web.Mvc.Html.GridControlType)">
            <summary>
            绑定控件列
            </summary>
            <param name="action"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnCollection`1.BindControl(System.String,System.Web.Mvc.Html.GridControlType)">
            <summary>
            绑定控件列
            </summary>
            <param name="bindField">字段名称</param>
            <param name="type">控件类型</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridColumnCollection`1.BindTemplate(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            绑定模板列，一般都用于操作按钮列
            </summary>
            <param name="width"></param>
            <param name="title"></param>
            <param name="bindField"></param>
            <param name="sortable"></param>
            <returns></returns>
        </member>
        <member name="T:NBlock.MVCControl.Filters.AjaxExceptionAttribute">
            <summary>
            Ajax异常处理过滤器
            </summary>
        </member>
        <member name="M:NBlock.MVCControl.Filters.AjaxExceptionAttribute.AjaxError(System.String,System.Web.Mvc.ExceptionContext)">
            <summary>
            Ajaxes the error.
            </summary>
            <param name="message">The message.</param>
            <param name="filterContext">The filter context.</param>
            <returns>JsonResult</returns>
        </member>
        <member name="T:NBlock.MVCControl.EnumExtensions">
            <summary>
            枚举的扩展方法
            </summary>
        </member>
        <member name="M:NBlock.MVCControl.EnumExtensions.GetDescription(System.Enum)">
            <summary>
            获取枚举项的扩展信息
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:NBlock.MVCControl.ExpressionExtensions">
            <summary>
            表达式树的扩展方法
            </summary>
        </member>
        <member name="M:NBlock.MVCControl.nbSearchCondition.AddSearchItem(System.String,System.String)">
            <summary>
            将前台的查询控件转化并添加到查询条件中
            </summary>
            <param name="controlName">当前项的Html控件的Name属性</param>
            <param name="val">当前项的值</param>
        </member>
        <member name="T:NBlock.MVCControl.nbSearchConditionBinder">
            <summary>
            查询条件的绑定器
            </summary>
        </member>
        <member name="T:NBlock.MVCControl.AjaxFormExtensions">
            <summary>
            异步表单扩展类
            </summary>
        </member>
        <member name="M:NBlock.MVCControl.AjaxFormExtensions.nbAjaxBeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            普通Ajax表单
            </summary>
            <param name="htmlHelper"></param>
            <param name="htmlAttributes">HTML的属性集合</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.AjaxFormExtensions.nbAjaxImportBeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Excel导入的Ajax表单
            </summary>
            <param name="htmlHelper"></param>
            <param name="htmlAttributes">HTML的属性集合</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.AjaxFormExtensions.DWZFormBar(System.Web.Mvc.HtmlHelper)">
            <summary>
            表单的提交按钮Bar
            </summary>
            <param name="htmlHelper"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.AjaxFormExtensions.nbFormBar(System.Web.Mvc.HtmlHelper)">
            <summary>
            普通表单的提交按钮Bar
            </summary>
            <param name="htmlHelper"></param>
            <returns></returns>
        </member>
        <member name="T:NBlock.MVCControl.NBInputExtensions">
            <summary>
            输入控件的扩展类
            </summary>
        </member>
        <!-- 对于成员“M:NBlock.MVCControl.NBInputExtensions.nbTextBox(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Object)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:NBlock.MVCControl.NBInputExtensions.nbTextBox(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:NBlock.MVCControl.NBInputExtensions.nbTextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:NBlock.MVCControl.NBInputExtensions.nbTextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:NBlock.MVCControl.NBInputExtensions.nbTextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object},System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:NBlock.MVCControl.NBInputExtensions.nbPasswordFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:NBlock.MVCControl.NBInputExtensions.nbPasswordFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:NBlock.MVCControl.NBInputExtensions.nbPassword(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:NBlock.MVCControl.NBInputExtensions.nbTextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:NBlock.MVCControl.NBInputExtensions.nbTextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})”忽略有格式错误的 XML 注释 -->
        <member name="M:NBlock.MVCControl.NBInputExtensions.nbLookupFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String,System.Object)">
            <summary>
            nb风格的lookup文本输入框
            </summary>
            <param name="htmlHelper"></param>
            <param name="expression">lambda表达式</param>
            <param name="htmlAttributes">HTML的属性集合</param>
            <example>
            输入HTML如下：
                <p>
                    <label for="StartDate">日期</label>
                    <input type="text" style="width: 185px;" name="StartDate" id="StartDate" class="date" />
                    <a href="javascript:;" class="inputDateButton">选择</a>
                </p>
            </example>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.nbLookupFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            nb风格的lookup文本输入框
            </summary>
            <param name="htmlHelper"></param>
            <param name="expression">lambda表达式</param>
            <param name="htmlAttributes">HTML的属性集合</param>
            <example>
            输入HTML如下：
                <p>
                    <label for="StartDate">日期</label>
                    <input type="text" style="width: 185px;" name="StartDate" id="StartDate" class="date" />
                    <a href="javascript:;" class="inputDateButton">选择</a>
                </p>
            </example>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.nbDateFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
            <summary>
            nb风格的日期输入控件
            </summary>
            <param name="htmlHelper"></param>
            <param name="expression">lambda表达式</param>
            <param name="htmlAttributes">HTML的属性集合</param>
            <example>
            输入HTML如下：
                <p>
                    <label for="StartDate">日期</label>
                    <input type="text" style="width: 185px;" name="StartDate" id="StartDate" class="date" />
                    <a href="javascript:;" class="inputDateButton">选择</a>
                </p>
            </example>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.nbDateFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            nb风格的日期输入控件
            </summary>
            <param name="htmlHelper"></param>
            <param name="expression">lambda表达式</param>
            <param name="htmlAttributes">HTML的属性集合</param>
            <example>
            输入HTML如下：
                <p>
                    <label for="StartDate">日期</label>
                    <input type="text" style="width: 185px;" name="StartDate" id="StartDate" class="date" />
                    <a href="javascript:;" class="inputDateButton">选择</a>
                </p>
            </example>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.nbDropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
            <summary>
            nb风格的下拉框选择控件
            </summary>
            <param name="htmlHelper"></param>
            <param name="expression">lambda表达式</param>
            <param name="htmlAttributes">HTML的属性集合</param>
            <example>
            输入HTML如下：
                <p>
                    <label for="StartDate">日期</label>
                    <input type="text" style="width: 185px;" name="StartDate" id="StartDate" class="date" />
                    <a href="javascript:;" class="inputDateButton">选择</a>
                </p>
            </example>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.nbDropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IList{System.Web.Mvc.SelectListItem},System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            nb风格的下拉框选择控件
            </summary>
            <param name="htmlHelper"></param>
            <param name="expression">lambda表达式</param>
            <param name="htmlAttributes">HTML的属性集合</param>
            <example>
            输入HTML如下：
                <p>
                    <label for="StartDate">日期</label>
                    <input type="text" style="width: 200px;" name="StartDate" id="StartDate" class="date" />
                    <a href="javascript:;" class="inputDateButton">选择</a>
                </p>
            </example>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.nbCheckBoxListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Func{System.Object,System.Object},System.Object)">
            <summary>
            nb风格的多选择框（CheckBox）
            </summary>
            <param name="htmlHelper"></param>
            <param name="expression">lambda表达式</param>
            <param name="htmlAttributes">HTML的属性集合</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.nbCheckBoxListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Func{System.Object,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            nb风格的多选择框（CheckBox）
            </summary>
            <param name="htmlHelper"></param>
            <param name="expression">lambda表达式</param>
            <param name="htmlAttributes">HTML的属性集合</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.nbRadioListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Boolean,System.Func{System.Object,System.Object},System.Object)">
            <summary>
            nb风格的单选择框（RadioButton）
            </summary>
            <param name="htmlHelper"></param>
            <param name="expression">lambda表达式</param>
            <param name="htmlAttributes">HTML的属性集合</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.nbRadioListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IList{System.Web.Mvc.SelectListItem},System.Boolean,System.Func{System.Object,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            nb风格的单选择框（RadioButton）
            </summary>
            <param name="htmlHelper"></param>
            <param name="expression">lambda表达式</param>
            <param name="htmlAttributes">HTML的属性集合</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.nbEmptyBox(System.Web.Mvc.HtmlHelper)">
            <summary>
            nb风格的空内容的控件，占据一个字段的位置，用于强制换行。
            </summary>
            <param name="htmlHelper"></param>
            <param name="htmlAttributes">HTML的属性集合</param>
            <example>
            输入HTML如下：
                <p></p>
            </example>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.Title(System.Web.IHtmlString,System.String)">
            <summary>
            设置标题
            </summary>
            <param name="strHtml"></param>
            <param name="title">标题</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.Required(System.Web.IHtmlString)">
            <summary>
            必填项
            </summary>
            <param name="strHtml"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.Phone(System.Web.IHtmlString)">
            <summary>
            电话号码
            </summary>
            <param name="strHtml"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.Email(System.Web.IHtmlString)">
            <summary>
            邮箱地址
            </summary>
            <param name="strHtml"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.Digits(System.Web.IHtmlString)">
            <summary>
            整数
            </summary>
            <param name="strHtml"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.Number(System.Web.IHtmlString)">
            <summary>
            浮点数
            </summary>
            <param name="strHtml"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.Alphanumeric(System.Web.IHtmlString)">
            <summary>
            字母、数字、下划线
            </summary>
            <param name="strHtml"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.Lettersonly(System.Web.IHtmlString)">
            <summary>
            只能输入字母
            </summary>
            <param name="strHtml"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.Url(System.Web.IHtmlString)">
            <summary>
            网址
            </summary>
            <param name="strHtml"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.ReadOnly(System.Web.IHtmlString,System.Boolean)">
            <summary>
            只读文本框
            </summary>
            <param name="strHtml"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.Disable(System.Web.IHtmlString,System.Boolean)">
            <summary>
            禁用文本框
            </summary>
            <param name="strHtml"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.Alt(System.Web.IHtmlString,System.String)">
            <summary>
            显示水印提示
            </summary>
            <param name="strHtml"></param>
            <param name="altText">水印提示文本</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.MaxLength(System.Web.IHtmlString,System.Int32)">
            <summary>
            最大长度
            </summary>
            <param name="strHtml"></param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.MinLength(System.Web.IHtmlString,System.Int32)">
            <summary>
            最小长度
            </summary>
            <param name="strHtml"></param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.EqualTo(System.Web.IHtmlString,System.String)">
            <summary>
            判断两个控件的值是否相等，比如确认密码控件
            </summary>
            <param name="strHtml"></param>
            <param name="controlId">控件ID</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.Min(System.Web.IHtmlString,System.Double)">
            <summary>
            大于指定数字的值
            </summary>
            <param name="strHtml"></param>
            <param name="number">数字</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.Max(System.Web.IHtmlString,System.Double)">
            <summary>
            小于指定数字的值
            </summary>
            <param name="strHtml"></param>
            <param name="number">数字</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.Remote(System.Web.IHtmlString,System.String)">
            <summary>
            远程服务端验证，直接返回布尔值
            </summary>
            <param name="strHtml"></param>
            <param name="url">远程请求服务地址</param>
            <returns>bool</returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.AjaxTodo(System.Web.IHtmlString,System.String,System.String)">
            <summary>
            自动绑定Ajax请求，文本框通过blur事件触发
            </summary>
            <param name="strHtml"></param>
            <param name="url">远程请求服务地址</param>
            <param name="callback">回调函数，参数为ajax返回的data</param>
            <returns>bool</returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.CompareDate(System.Web.IHtmlString,System.String)">
            <summary>
            比较时间
            </summary>
            <param name="strHtml"></param>
            <param name="controlId">控件Id</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.Line(System.Web.IHtmlString)">
            <summary>
            将文本框控件整行显示
            </summary>
            <param name="strHtml"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.nowrap(System.Web.IHtmlString,System.Boolean)">
            <summary>
            将控件按整行显示
            </summary>
            <param name="strHtml"></param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.NBInputExtensions.nbInputHelper(System.Web.Mvc.HtmlHelper,System.Web.Mvc.MvcHtmlString,System.Web.Mvc.MvcHtmlString,System.String,System.Web.Mvc.MvcHtmlString,System.Func{System.Object,System.Object})">
            <summary>
            获取完整输入控件的HTML
            </summary>
            <param name="htmlHelper"></param>
            <param name="label"></param>
            <param name="control"></param>
            <param name="controlName"></param>
            <param name="button">日期、Lookup等控件的按钮</param>
            <returns></returns>
        </member>
        <member name="T:NBlock.MVCControl.CheckBoxListExtension">
            <summary>
            复选框列表扩展
            </summary>
        </member>
        <member name="M:NBlock.MVCControl.CheckBoxListExtension.InputListInternal(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Boolean,System.Func{System.Object,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            核心方法，用于生成单选或多选框的控件
            </summary>
            <param name="html"></param>
            <param name="name">字段名称</param>
            <param name="selectList">数据源</param>
            <param name="allowMultiple">是否多选</param>
            <param name="format">自定义控件的显示外观</param>
            <param name="htmlAttributes">Input控件的的属性集合</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.CheckBoxListExtension.GetName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            获取Lambda表达式的属性名称
            </summary>
            <param name="expression">Lambda表达式</param>
            <returns></returns>
        </member>
        <member name="T:NBlock.MVCControl.InputListItem">
            <summary>
            自定义控件显示外观的元数据
            </summary>
        </member>
        <member name="T:NBlock.MVCControl.Tree.TreeTheme">
            <summary>
            树的风格样式
            </summary>
        </member>
        <member name="F:NBlock.MVCControl.Tree.TreeTheme.Arrow">
            <summary>
            箭头样式
            </summary>
        </member>
        <member name="F:NBlock.MVCControl.Tree.TreeTheme.Line">
            <summary>
            线样式
            </summary>
        </member>
        <member name="F:NBlock.MVCControl.Tree.TreeTheme.No_Line">
            <summary>
            无线样式
            </summary>
        </member>
        <member name="T:System.Web.Mvc.Html.GridSortOrder">
            <summary>
            表格的排序规则
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.GridSortOrder.Asc">
            <summary>
            升序
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.GridSortOrder.Desc">
            <summary>
            降序
            </summary>
        </member>
        <member name="T:System.Web.Mvc.Html.GridAlign">
            <summary>
            文本的对齐方式
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.GridAlign.Left">
            <summary>
            靠左
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.GridAlign.Center">
            <summary>
            居中
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.GridAlign.Right">
            <summary>
            靠右
            </summary>
        </member>
        <member name="T:System.Web.Mvc.Html.GridDataType">
            <summary>
            数据格式
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.GridDataType.JSON">
            <summary>
            JSON数据格式
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.GridDataType.XML">
            <summary>
            XML数据格式
            </summary>
        </member>
        <member name="T:System.Web.Mvc.Html.GridButtonType">
            <summary>
            按钮类型
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.GridButtonType.Add">
            <summary>
            添加
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.GridButtonType.Edit">
            <summary>
            修改
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.GridButtonType.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.GridButtonType.Import">
            <summary>
            导入
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.GridButtonType.Query">
            <summary>
            检索
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.GridButtonType.Cancel">
            <summary>
            取消、返回
            </summary>
        </member>
        <member name="T:System.Web.Mvc.Html.SearchControlType">
            <summary>
            高级查询的控件类型
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.SearchControlType.DropDownList">
            <summary>
            下拉框
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.SearchControlType.DateBlock">
            <summary>
            时间区间
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.SearchControlType.Date">
            <summary>
            时间控件 
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.SearchControlType.TextBox">
            <summary>
            文本框
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.SearchControlType.NumberBlock">
            <summary>
            数值区间
            </summary>
        </member>
        <member name="T:System.Web.Mvc.Html.GridControlType">
            <summary>
            列表的可输入控件类型
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.GridControlType.DropDownList">
            <summary>
            下拉框
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.GridControlType.Date">
            <summary>
            时间控件 
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.GridControlType.TextBox">
            <summary>
            文本框
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.GridControlType.Label">
            <summary>
            显示文本的Label控件，会附带一个隐藏控件
            </summary>
        </member>
        <member name="T:System.Web.Mvc.Html.SummaryType">
            <summary>
            列表的汇总类型
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.SummaryType.Sum">
            <summary>
            总计
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.SummaryType.Average">
            <summary>
            平均值
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.SummaryType.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="F:System.Web.Mvc.Html.SummaryType.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="T:NBlock.MVCControl.Grid.GridButtonCollection`1">
            <summary>
            表格的按钮信息集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="F:NBlock.MVCControl.Grid.GridButtonCollection`1._buttons">
            <summary>
            列信息集合
            </summary>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridButtonCollection`1.Bind(System.Web.Mvc.Html.GridButtonType,System.String,System.String)">
            <summary>
            添加一个按钮
            </summary>
            <param name="title">按钮显示标题</param>
            <param name="type">按钮类型</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridButtonCollection`1.BindAddButton(System.String,System.Web.Mvc.Html.GridButtonType,System.String)">
            <summary>
            添加一个新增按钮
            </summary>
            <param name="type">按钮类型</param>
            <param name="title">按钮标题</param>
            <param name="actionUrl">请求Action地址</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridButtonCollection`1.BindDeleteButton(System.String,System.String,System.Web.Mvc.Html.GridButtonType)">
            <summary>
            添加一个批量删除按钮
            </summary>
            <param name="type">按钮类型</param>
            <param name="title">按钮标题</param>
            <param name="actionUrl">请求Action地址</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridButtonCollection`1.BindSelectButton(System.String,System.Web.Mvc.Html.GridButtonType)">
            <summary>
            添加一个选择添加按钮
            </summary>
            <param name="type">按钮类型</param>
            <param name="title">按钮标题</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridButtonCollection`1.BindCancelButton(System.String,System.Web.Mvc.Html.GridButtonType)">
            <summary>
            添加一个关闭弹出框的按钮
            </summary>
            <param name="type">按钮类型</param>
            <param name="title">按钮标题</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridButtonCollection`1.Bind(System.String,System.String,System.Web.Mvc.Html.GridButtonType,System.String,System.String)">
            <summary>
            添加一个按钮
            </summary>
            <param name="name">按钮名称</param>
            <param name="title">按钮显示标题</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridButtonCollection`1.Bind(System.String,System.String,System.Web.Mvc.Html.GridButtonType)">
            <summary>
            添加一个按钮
            </summary>
            <param name="name">按钮名称</param>
            <param name="title">按钮显示标题</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridButtonCollection`1.Bind(System.String,System.Web.Mvc.Html.GridButtonType)">
            <summary>
            添加一个按钮
            </summary>
            <param name="title">按钮显示标题</param>
            <param name="type">按钮类型</param>
            <returns></returns>
        </member>
        <member name="M:NBlock.MVCControl.Grid.GridButtonCollection`1.Bind(System.String,System.String)">
            <summary>
            添加一个按钮
            </summary>
            <param name="name">按钮名称</param>
            <param name="title">按钮显示标题</param>
            <returns></returns>
        </member>
    </members>
</doc>
